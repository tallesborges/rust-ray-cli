name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit --quiet
          cargo audit

  test:
    name: Run Tests
    runs-on: macos-latest
    needs: code-quality
    strategy:
      matrix:
        rust: [nightly]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Run doctests
        run: cargo test --doc

  build:
    name: Build Application
    runs-on: macos-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build application
        run: cargo build --release --verbose

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-ray-cli-${{ github.sha }}
          path: target/release/rust-ray-cli
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-ray-cli-${{ github.sha }}
          path: target/release/

      - name: Make binary executable
        run: chmod +x target/release/rust-ray-cli

      - name: Test application startup
        run: |
          timeout 5s ./target/release/rust-ray-cli || test $? = 124
        working-directory: target/release

      - name: Verify server port binding
        run: |
          ./target/release/rust-ray-cli &
          APP_PID=$!
          sleep 2
          
          # Check if port 23517 is listening
          if lsof -i :23517 | grep -q LISTEN; then
            echo "✅ Server successfully bound to port 23517"
          else
            echo "❌ Server failed to bind to port 23517"
            exit 1
          fi
          
          kill $APP_PID
        working-directory: target/release

  benchmark:
    name: Performance Benchmarks
    runs-on: macos-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Run benchmarks
        run: cargo bench --no-run

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: target/criterion/reports/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '200%'
          comment-on-alert: true

  dependency-review:
    name: Dependency Review
    runs-on: macos-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, integration-test]
    if: always()
    steps:
      - name: Notify on success
        if: needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.integration-test.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ CI pipeline failed!"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Integration Tests: ${{ needs.integration-test.result }}"
          exit 1