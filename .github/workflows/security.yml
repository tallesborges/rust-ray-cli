name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit --json --format json > audit-results.json

      - name: Process audit results
        run: |
          if [ -s audit-results.json ]; then
            echo "Security vulnerabilities found:"
            cat audit-results.json | jq -r '.vulnerabilities[] | "- \(.package.name)@\(.package.version): \(.advisory.title)"'
          else
            echo "No security vulnerabilities found."
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  code-scanning:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build project
        run: cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          cargo license --json > licenses.json
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if cat licenses.json | jq -r '.[].license' | grep -q "$license"; then
              echo "❌ Found problematic license: $license"
              cat licenses.json | jq -r ".[] | select(.license == \"$license\") | \"Package: \(.name), License: \(.license)\""
              exit 1
            fi
          done
          
          echo "✅ All licenses are compliant"

      - name: Generate license report
        run: |
          echo "# License Report" > LICENSE_REPORT.md
          echo "" >> LICENSE_REPORT.md
          echo "Generated on: $(date)" >> LICENSE_REPORT.md
          echo "" >> LICENSE_REPORT.md
          echo "## Dependencies and Licenses" >> LICENSE_REPORT.md
          echo "" >> LICENSE_REPORT.md
          cargo license --tsv | sed 's/\t/|/g' | sed '1s/^/|/' | sed 's/$/|/' | sed '1a|---|---|---|---|' >> LICENSE_REPORT.md

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.sha }}
          path: LICENSE_REPORT.md
          retention-days: 30

  secrets-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Create cargo-deny configuration
        run: |
          cat > deny.toml << 'EOF'
          [graph]
          targets = [
              { triple = "x86_64-apple-darwin" },
              { triple = "aarch64-apple-darwin" },
          ]

          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/rustsec/advisory-db"]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "warn"
          notice = "warn"
          ignore = []

          [licenses]
          unlicensed = "deny"
          allow = [
              "MIT",
              "Apache-2.0",
              "Apache-2.0 WITH LLVM-exception",
              "BSD-2-Clause",
              "BSD-3-Clause",
              "ISC",
              "Unicode-DFS-2016",
              "CC0-1.0",
          ]
          deny = [
              "GPL-2.0",
              "GPL-3.0",
              "AGPL-1.0",
              "AGPL-3.0",
          ]
          copyleft = "warn"
          allow-osi-fsf-free = "neither"
          default = "deny"
          confidence-threshold = 0.8

          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          workspace-default-features = "allow"
          external-default-features = "allow"
          allow = []
          deny = []

          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          allow-git = ["https://github.com/zed-industries/zed"]
          EOF

      - name: Run cargo-deny check
        run: cargo deny check

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-scanning, code-scanning, license-check, secrets-scanning, supply-chain-security]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "# Security Scan Summary"
          echo ""
          echo "## Results:"
          echo "- Security Audit: ${{ needs.security-audit.result }}"
          echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}"
          echo "- Code Scanning: ${{ needs.code-scanning.result }}"
          echo "- License Check: ${{ needs.license-check.result }}"
          echo "- Secrets Scanning: ${{ needs.secrets-scanning.result }}"
          echo "- Supply Chain Security: ${{ needs.supply-chain-security.result }}"
          
          if [[ "${{ needs.security-audit.result }}" == "success" && 
                "${{ needs.dependency-scanning.result }}" == "success" && 
                "${{ needs.code-scanning.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.secrets-scanning.result }}" == "success" && 
                "${{ needs.supply-chain-security.result }}" == "success" ]]; then
            echo ""
            echo "✅ All security checks passed!"
          else
            echo ""
            echo "❌ Some security checks failed. Please review the results."
          fi