name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Validate version consistency
        run: |
          # Extract version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          # Remove 'v' prefix for comparison
          VERSION_NUMBER=${VERSION#v}
          
          # Check if Cargo.toml version matches
          CARGO_VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d'"' -f2)
          
          if [ "$VERSION_NUMBER" != "$CARGO_VERSION" ]; then
            echo "❌ Version mismatch: tag $VERSION_NUMBER vs Cargo.toml $CARGO_VERSION"
            exit 1
          fi
          
          echo "✅ Version validation passed: $VERSION_NUMBER"

      - name: Run full test suite
        run: |
          cargo test --verbose --all-features
          cargo clippy --all-targets --all-features -- -D warnings
          cargo fmt --all -- --check

  build-release:
    name: Build Release
    runs-on: macos-latest
    needs: validate-release
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Create release archive
        run: |
          # Extract version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          # Create archive directory
          ARCHIVE_NAME="rust-ray-cli-$VERSION-${{ matrix.target }}"
          mkdir -p "$ARCHIVE_NAME"
          
          # Copy binary and documentation
          cp target/${{ matrix.target }}/release/rust-ray-cli "$ARCHIVE_NAME/"
          cp README.md "$ARCHIVE_NAME/"
          cp LICENSE "$ARCHIVE_NAME/" 2>/dev/null || echo "No LICENSE file found"
          
          # Create checksums
          cd "$ARCHIVE_NAME"
          shasum -a 256 rust-ray-cli > rust-ray-cli.sha256
          cd ..
          
          # Create tarball
          tar -czf "$ARCHIVE_NAME.tar.gz" "$ARCHIVE_NAME"
          
          # Create zip for Windows compatibility
          zip -r "$ARCHIVE_NAME.zip" "$ARCHIVE_NAME"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: |
            rust-ray-cli-*-${{ matrix.target }}.tar.gz
            rust-ray-cli-*-${{ matrix.target }}.zip
          retention-days: 7

  security-check:
    name: Security Check for Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run security audit
        run: |
          cargo install cargo-audit --locked
          cargo audit

      - name: Check for known vulnerabilities
        run: |
          cargo install cargo-deny --locked
          echo '[advisories]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "warn"
          notice = "warn"' > deny.toml
          cargo deny check advisories

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-check]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version and determine prerelease
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            # Determine if prerelease based on version pattern
            if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
              PRERELEASE="true"
            else
              PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ steps.version.outputs.version }}"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi
          
          # Create changelog content
          CHANGELOG="## What's Changed

          $COMMITS

          ## Installation

          ### macOS (x86_64)
          \`\`\`bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/rust-ray-cli-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.gz | tar xz
          \`\`\`

          ### macOS (Apple Silicon)
          \`\`\`bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/rust-ray-cli-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.gz | tar xz
          \`\`\`

          ## Verification

          All release binaries include SHA256 checksums for verification.

          ## Full Changelog
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ steps.version.outputs.version }}"
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Release ${{ steps.version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.version.outputs.prerelease }}
          draft: false
          files: |
            artifacts/release-x86_64-apple-darwin/*
            artifacts/release-aarch64-apple-darwin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.create-release.outputs.version || github.ref_name }}";
            
            const body = `## Post-Release Checklist for ${version}

            ### Immediate Tasks
            - [ ] Verify release assets are correctly uploaded
            - [ ] Test download and installation on different macOS versions
            - [ ] Update documentation if needed
            - [ ] Notify users of the new release

            ### Marketing & Communication
            - [ ] Update project website (if applicable)
            - [ ] Post on social media
            - [ ] Update package managers (Homebrew, etc.)
            - [ ] Send newsletter update (if applicable)

            ### Monitoring
            - [ ] Monitor download statistics
            - [ ] Watch for bug reports
            - [ ] Check security alerts
            - [ ] Monitor performance metrics

            ### Future Planning
            - [ ] Review feedback from this release
            - [ ] Plan next release features
            - [ ] Update roadmap

            ---
            This issue was automatically created after the ${version} release.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release tasks for ${version}`,
              body: body,
              labels: ['type: release', 'priority: medium']
            });

      - name: Update development branch
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "Consider updating the development branch with any release-specific changes"
          echo "This could include version bumps for the next development cycle"

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: create-release
    if: github.repository == 'tallesborges/rust-ray-cli' && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    steps:
      - name: Update Homebrew formula
        run: |
          echo "Homebrew formula update would be implemented here"
          echo "This would typically involve:"
          echo "1. Fork homebrew-core or create a custom tap"
          echo "2. Update the formula with new version and checksums"
          echo "3. Submit a PR to the Homebrew repository"
          echo "4. For custom tap: update directly"
          
          # Example implementation (commented out):
          # git clone https://github.com/tallesborges/homebrew-rust-ray-cli
          # cd homebrew-rust-ray-cli
          # # Update formula file with new version and checksums
          # git commit -m "Update rust-ray-cli to ${{ github.ref_name }}"
          # git push

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-release, post-release]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "🎉 Release ${{ github.ref_name }} completed successfully!"
          echo "📦 Release assets have been uploaded to GitHub"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "📋 Post-release issue created for follow-up tasks"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-check, create-release]
    if: failure()
    steps:
      - name: Failure notification
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## Release Failed ❌

            The release process for \`${{ github.ref_name }}\` has failed.

            ### Failed Jobs:
            - Validate Release: ${{ needs.validate-release.result }}
            - Build Release: ${{ needs.build-release.result }}
            - Security Check: ${{ needs.security-check.result }}
            - Create Release: ${{ needs.create-release.result }}

            Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            ### Next Steps:
            1. Review the failed job logs
            2. Fix any issues
            3. Re-trigger the release workflow

            ---
            This issue was automatically created due to a release failure.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release Failed: ${{ github.ref_name }}`,
              body: body,
              labels: ['type: bug', 'priority: high', 'needs: investigation']
            });