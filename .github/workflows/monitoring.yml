name: Repository Monitoring & Health

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday at 8 AM UTC
    - cron: '0 20 * * *'  # Daily at 8 PM UTC for metrics
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  repository-health:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze repository metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const { data: contributors } = await github.rest.repos.listContributors({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Calculate metrics
            const openIssues = issues.filter(issue => !issue.pull_request).length;
            const openPRs = prs.length;
            const lastRelease = releases[0];
            const daysSinceLastRelease = lastRelease ? 
              Math.floor((Date.now() - new Date(lastRelease.created_at)) / (1000 * 60 * 60 * 24)) : 
              'No releases';

            // Health score calculation
            let healthScore = 100;
            if (openIssues > 10) healthScore -= 20;
            if (openPRs > 5) healthScore -= 15;
            if (daysSinceLastRelease > 90) healthScore -= 25;
            if (repo.archived) healthScore = 0;

            const report = `## Repository Health Report 📊

            ### Key Metrics
            - **Health Score**: ${healthScore}/100 ${healthScore >= 80 ? '🟢' : healthScore >= 60 ? '🟡' : '🔴'}
            - **Stars**: ${repo.stargazers_count} ⭐
            - **Forks**: ${repo.forks_count} 🍴
            - **Watchers**: ${repo.watchers_count} 👀
            - **Contributors**: ${contributors.length} 👥

            ### Current Status
            - **Open Issues**: ${openIssues} 🐛
            - **Open PRs**: ${openPRs} 🔄
            - **Last Release**: ${lastRelease ? lastRelease.tag_name : 'None'} (${daysSinceLastRelease} days ago)
            - **Default Branch**: ${repo.default_branch} 🌿

            ### Repository Settings
            - **Visibility**: ${repo.private ? 'Private' : 'Public'} ${repo.private ? '🔒' : '🌍'}
            - **Issues Enabled**: ${repo.has_issues ? 'Yes' : 'No'} ${repo.has_issues ? '✅' : '❌'}
            - **Projects Enabled**: ${repo.has_projects ? 'Yes' : 'No'} ${repo.has_projects ? '✅' : '❌'}
            - **Wiki Enabled**: ${repo.has_wiki ? 'Yes' : 'No'} ${repo.has_wiki ? '✅' : '❌'}
            - **Pages Enabled**: ${repo.has_pages ? 'Yes' : 'No'} ${repo.has_pages ? '✅' : '❌'}

            ### Recommendations
            ${healthScore < 80 ? `
            #### Areas for Improvement:
            ${openIssues > 10 ? '- Consider triaging and closing stale issues\n' : ''}
            ${openPRs > 5 ? '- Review and merge pending pull requests\n' : ''}
            ${daysSinceLastRelease > 90 ? '- Consider creating a new release\n' : ''}
            ` : '✅ Repository is in excellent health!'}

            ---
            *Generated on ${new Date().toISOString()}*`;

            console.log(report);

            // Create or update health report issue
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'type: health-report',
              state: 'open'
            });

            if (existingIssues.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues[0].number,
                title: `Repository Health Report - ${new Date().toLocaleDateString()}`,
                body: report
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Repository Health Report - ${new Date().toLocaleDateString()}`,
                body: report,
                labels: ['type: health-report', 'priority: low']
              });
            }

  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-outdated
        run: cargo install cargo-outdated --locked

      - name: Check for outdated dependencies
        run: |
          echo "# Dependency Update Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          if cargo outdated --format json > outdated.json 2>/dev/null; then
            if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
              echo "## Outdated Dependencies" >> dependency-report.md
              echo "" >> dependency-report.md
              
              # Parse JSON and create markdown table
              echo "| Package | Current | Latest | Type |" >> dependency-report.md
              echo "|---------|---------|--------|------|" >> dependency-report.md
              
              jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) | \(.kind) |"' outdated.json >> dependency-report.md
              
              echo "" >> dependency-report.md
              echo "## Recommendations" >> dependency-report.md
              echo "" >> dependency-report.md
              echo "- Review each dependency for breaking changes" >> dependency-report.md
              echo "- Update dependencies in batches for easier testing" >> dependency-report.md
              echo "- Test thoroughly after each update" >> dependency-report.md
              echo "- Consider using \`cargo update\` for patch versions" >> dependency-report.md
            else
              echo "## Dependencies Status" >> dependency-report.md
              echo "" >> dependency-report.md
              echo "✅ All dependencies are up to date!" >> dependency-report.md
            fi
          else
            echo "## Dependencies Status" >> dependency-report.md
            echo "" >> dependency-report.md
            echo "❌ Unable to check dependency status" >> dependency-report.md
          fi

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ github.sha }}
          path: dependency-report.md
          retention-days: 30

  workflow-performance:
    name: Workflow Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Analyze workflow performance
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
              status: 'completed'
            });

            const runs = workflowRuns.workflow_runs;
            
            if (runs.length === 0) {
              console.log("No completed workflow runs found");
              return;
            }

            // Group by workflow
            const workflowStats = {};
            
            runs.forEach(run => {
              const workflowName = run.name;
              if (!workflowStats[workflowName]) {
                workflowStats[workflowName] = {
                  total: 0,
                  success: 0,
                  failure: 0,
                  durations: []
                };
              }
              
              workflowStats[workflowName].total++;
              
              if (run.conclusion === 'success') {
                workflowStats[workflowName].success++;
              } else {
                workflowStats[workflowName].failure++;
              }
              
              // Calculate duration in minutes
              const duration = (new Date(run.updated_at) - new Date(run.created_at)) / (1000 * 60);
              workflowStats[workflowName].durations.push(duration);
            });

            let report = `## Workflow Performance Report 📈

            Generated on: ${new Date().toISOString()}

            ### Performance Metrics

            `;

            Object.entries(workflowStats).forEach(([name, stats]) => {
              const successRate = ((stats.success / stats.total) * 100).toFixed(1);
              const avgDuration = (stats.durations.reduce((a, b) => a + b, 0) / stats.durations.length).toFixed(1);
              const maxDuration = Math.max(...stats.durations).toFixed(1);
              const minDuration = Math.min(...stats.durations).toFixed(1);
              
              report += `#### ${name}
              - **Success Rate**: ${successRate}% (${stats.success}/${stats.total}) ${successRate >= 90 ? '🟢' : successRate >= 75 ? '🟡' : '🔴'}
              - **Average Duration**: ${avgDuration} minutes
              - **Duration Range**: ${minDuration} - ${maxDuration} minutes
              - **Total Runs**: ${stats.total}

              `;
            });

            report += `
            ### Recommendations

            - Monitor workflows with success rates below 90%
            - Investigate workflows with increasing duration trends
            - Consider optimizing workflows that take over 10 minutes
            - Set up alerts for workflow failures

            ---
            *Based on last 50 completed workflow runs*`;

            console.log(report);

  stale-issue-detection:
    name: Detect Stale Issues
    runs-on: ubuntu-latest
    steps:
      - name: Check for stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc',
              per_page: 100
            });

            const now = new Date();
            const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));
            const ninetyDaysAgo = new Date(now.getTime() - (90 * 24 * 60 * 60 * 1000));

            const staleIssues = [];
            const veryStaleIssues = [];

            issues.forEach(issue => {
              if (issue.pull_request) return; // Skip PRs
              
              const updatedAt = new Date(issue.updated_at);
              
              if (updatedAt < ninetyDaysAgo) {
                veryStaleIssues.push(issue);
              } else if (updatedAt < thirtyDaysAgo) {
                staleIssues.push(issue);
              }
            });

            if (staleIssues.length > 0 || veryStaleIssues.length > 0) {
              let report = `## Stale Issues Report 🗓️

              Found ${staleIssues.length} stale issues (30+ days) and ${veryStaleIssues.length} very stale issues (90+ days).

              `;

              if (veryStaleIssues.length > 0) {
                report += `### Very Stale Issues (90+ days)
                `;
                veryStaleIssues.slice(0, 10).forEach(issue => {
                  const daysSinceUpdate = Math.floor((now - new Date(issue.updated_at)) / (1000 * 60 * 60 * 24));
                  report += `- [#${issue.number}](${issue.html_url}) - ${issue.title} (${daysSinceUpdate} days)
                  `;
                });
              }

              if (staleIssues.length > 0) {
                report += `
                ### Stale Issues (30+ days)
                `;
                staleIssues.slice(0, 10).forEach(issue => {
                  const daysSinceUpdate = Math.floor((now - new Date(issue.updated_at)) / (1000 * 60 * 60 * 24));
                  report += `- [#${issue.number}](${issue.html_url}) - ${issue.title} (${daysSinceUpdate} days)
                  `;
                });
              }

              report += `
              ### Recommendations
              - Review very stale issues for relevance
              - Consider closing issues that are no longer applicable
              - Add "help wanted" labels to issues needing community support
              - Update or close issues that lack sufficient information
              `;

              console.log(report);

              // Add stale labels
              for (const issue of veryStaleIssues.slice(0, 5)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['status: stale']
                });
              }
            } else {
              console.log("✅ No stale issues found!");
            }

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Check security advisories
        uses: actions/github-script@v7
        with:
          script: |
            // Check for open security advisories
            try {
              const { data: advisories } = await github.rest.securityAdvisories.listRepositoryAdvisories({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'published'
              });

              if (advisories.length > 0) {
                console.log(`Found ${advisories.length} published security advisories`);
                advisories.forEach(advisory => {
                  console.log(`- ${advisory.summary} (${advisory.severity})`);
                });
              } else {
                console.log("✅ No published security advisories");
              }
            } catch (error) {
              console.log("Unable to check security advisories:", error.message);
            }

      - name: Check Dependabot alerts
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: alerts } = await github.rest.dependabot.listAlertsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });

              if (alerts.length > 0) {
                console.log(`Found ${alerts.length} open Dependabot alerts`);
                alerts.slice(0, 5).forEach(alert => {
                  console.log(`- ${alert.security_advisory.summary} (${alert.security_advisory.severity})`);
                });

                if (alerts.length > 5) {
                  console.log(`... and ${alerts.length - 5} more alerts`);
                }
              } else {
                console.log("✅ No open Dependabot alerts");
              }
            } catch (error) {
              console.log("Unable to check Dependabot alerts:", error.message);
            }

  monitoring-summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: [repository-health, dependency-updates, workflow-performance, stale-issue-detection, security-monitoring]
    if: always()
    steps:
      - name: Generate monitoring summary
        run: |
          echo "# Repository Monitoring Summary 📊"
          echo ""
          echo "## Job Results:"
          echo "- Repository Health: ${{ needs.repository-health.result }}"
          echo "- Dependency Updates: ${{ needs.dependency-updates.result }}"
          echo "- Workflow Performance: ${{ needs.workflow-performance.result }}"
          echo "- Stale Issue Detection: ${{ needs.stale-issue-detection.result }}"
          echo "- Security Monitoring: ${{ needs.security-monitoring.result }}"
          echo ""
          
          if [[ "${{ needs.repository-health.result }}" == "success" && 
                "${{ needs.dependency-updates.result }}" == "success" && 
                "${{ needs.workflow-performance.result }}" == "success" && 
                "${{ needs.stale-issue-detection.result }}" == "success" && 
                "${{ needs.security-monitoring.result }}" == "success" ]]; then
            echo "✅ All monitoring checks completed successfully!"
          else
            echo "⚠️ Some monitoring checks encountered issues. Please review the logs."
          fi
          echo ""
          echo "Generated on: $(date)"